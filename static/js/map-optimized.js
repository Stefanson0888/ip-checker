// üó∫Ô∏è –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ –∫–∞—Ä—Ç–∞ - –≤–∏–Ω–µ—Å–µ–Ω–∏–π JavaScript
// Performance-optimized map loading for checkip.app

// üöÄ –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–∞—Ä—Ç–∏
function initializeOptimizedMap() {
    if (!window.mapConfig?.hasCoordinates) {
      console.log('‚ùå No coordinates for map');
      return;
    }
    
    const mapContainer = document.getElementById('map');
    if (!mapContainer) {
      console.log('‚ùå Map container not found');
      return;
    }
    
    console.log('üó∫Ô∏è Starting optimized map initialization...');
    
    // üé® –°—Ç–≤–æ—Ä—é—î–º–æ –∫—Ä–∞—Å–∏–≤–∏–π placeholder
    createOptimizedPlaceholder(mapContainer);
    
    // üì± –ú–æ–±—ñ–ª—å–Ω–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è
    const isMobile = window.innerWidth <= 768;
    
    if (isMobile) {
      // –ú–æ–±—ñ–ª—å–Ω—ñ: —Ç—ñ–ª—å–∫–∏ –ø–æ –∫–ª—ñ–∫—É
      setupClickToLoad(mapContainer);
    } else {
      // –î–µ—Å–∫—Ç–æ–ø: lazy load + fallback
      setupIntersectionObserver(mapContainer);
    }
  }
  
  // üé® –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π placeholder
  function createOptimizedPlaceholder(container) {
    const isMobile = window.innerWidth <= 768;
    const height = isMobile ? '250px' : '400px';
    const mapCity = window.mapConfig.city || 'Unknown';
    const mapCountry = window.mapConfig.country || 'Unknown';
    
    container.innerHTML = `
      <div class="map-placeholder-optimized" style="
        width: 100%; 
        height: ${height}; 
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
        border-radius: 12px; 
        display: flex; 
        align-items: center; 
        justify-content: center; 
        cursor: pointer;
        border: 2px solid rgba(255,255,255,0.2);
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
        box-shadow: 0 8px 32px rgba(102, 126, 234, 0.3);
      ">
        <div style="
          text-align: center; 
          color: white; 
          z-index: 2; 
          position: relative;
          user-select: none;
        ">
          <div style="
            font-size: 3rem; 
            margin-bottom: 15px; 
            animation: mapBounce 2s infinite ease-in-out;
          ">üó∫Ô∏è</div>
          <div style="
            font-size: 1.2rem; 
            font-weight: 700; 
            margin-bottom: 8px;
            text-shadow: 0 2px 4px rgba(0,0,0,0.3);
          ">
            ${isMobile ? '–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å' : '–ö–ª—ñ–∫–Ω—ñ—Ç—å'} –¥–ª—è –∫–∞—Ä—Ç–∏
          </div>
          <div style="
            font-size: 0.9rem; 
            opacity: 0.9;
            text-shadow: 0 1px 2px rgba(0,0,0,0.3);
          ">
            üìç ${mapCity}, ${mapCountry}
          </div>
        </div>
        
        <!-- –ê–Ω—ñ–º–æ–≤–∞–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ -->
        <div style="
          position: absolute;
          top: -50%;
          left: -50%;
          width: 200%;
          height: 200%;
          background: radial-gradient(circle, rgba(255,255,255,0.1) 2px, transparent 2px);
          background-size: 40px 40px;
          animation: mapRotate 30s linear infinite;
          opacity: 0.5;
        "></div>
      </div>
    `;
    
    // hover –µ—Ñ–µ–∫—Ç–∏
    const placeholder = container.querySelector('.map-placeholder-optimized');
    
    placeholder.addEventListener('mouseenter', () => {
      placeholder.style.transform = 'scale(1.02) translateY(-4px)';
      placeholder.style.boxShadow = '0 12px 48px rgba(102, 126, 234, 0.4)';
    });
    
    placeholder.addEventListener('mouseleave', () => {
      placeholder.style.transform = 'scale(1) translateY(0)';
      placeholder.style.boxShadow = '0 8px 32px rgba(102, 126, 234, 0.3)';
    });
    
    console.log('‚úÖ Optimized placeholder created');
  }
  
  // üñ±Ô∏è Click to load –¥–ª—è –º–æ–±—ñ–ª—å–Ω–∏—Ö
  function setupClickToLoad(container) {
    const placeholder = container.querySelector('.map-placeholder-optimized');
    
    placeholder.addEventListener('click', () => {
      console.log('üì± Mobile click - loading map...');
      loadOptimizedMap(container);
    }, { once: true });
  }
  
  // üëÅÔ∏è Intersection Observer –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø—É
  function setupIntersectionObserver(container) {
    if (!('IntersectionObserver' in window)) {
      // Fallback –¥–ª—è —Å—Ç–∞—Ä–∏—Ö –±—Ä–∞—É–∑–µ—Ä—ñ–≤
      setTimeout(() => setupClickToLoad(container), 1000);
      return;
    }
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          console.log('üëÅÔ∏è Map in viewport - loading...');
          
          // –ó–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ UX
          setTimeout(() => {
            loadOptimizedMap(container);
          }, 800);
          
          observer.unobserve(entry.target);
        }
      });
    }, {
      root: null,
      rootMargin: '100px',
      threshold: 0.2
    });
    
    observer.observe(container);
    
    // Fallback click
    setupClickToLoad(container);
    
    console.log('‚úÖ Intersection observer setup');
  }
  
  // üó∫Ô∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ—ó –∫–∞—Ä—Ç–∏
  function loadOptimizedMap(container) {
    console.log('üöÄ Loading optimized Leaflet map...');
    
    // Loading —Å—Ç–∞–Ω
    const placeholder = container.querySelector('.map-placeholder-optimized');
    placeholder.style.background = 'linear-gradient(135deg, #4ade80 0%, #22c55e 100%)';
    placeholder.innerHTML = `
      <div style="text-align: center; color: white;">
        <div style="font-size: 3rem; margin-bottom: 15px; animation: mapSpin 1s linear infinite;">‚è≥</div>
        <div style="font-size: 1.1rem; font-weight: 600;">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–∞—Ä—Ç–∏...</div>
      </div>
    `;
    
    // ‚ö° Lazy load Leaflet resources
    loadLeafletResources().then(() => {
      createLeafletMap(container);
    }).catch(error => {
      console.error('‚ùå Map loading failed:', error);
      showMapError(container);
    });
  }
  
  // üì¶ Lazy loading Leaflet —Ä–µ—Å—É—Ä—Å—ñ–≤
  function loadLeafletResources() {
    return new Promise((resolve, reject) => {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ Leaflet –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π
      if (window.L) {
        resolve();
        return;
      }
      
      console.log('üì¶ Loading Leaflet resources...');
      
      // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ CSS
      const css = document.createElement('link');
      css.rel = 'stylesheet';
      css.href = 'https://unpkg.com/leaflet@1.9.3/dist/leaflet.css';
      css.crossOrigin = '';
      document.head.appendChild(css);
      
      // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ JS
      const script = document.createElement('script');
      script.src = 'https://unpkg.com/leaflet@1.9.3/dist/leaflet.js';
      script.async = true;
      script.crossOrigin = '';
      
      script.onload = () => {
        console.log('‚úÖ Leaflet loaded successfully');
        resolve();
      };
      
      script.onerror = () => {
        console.error('‚ùå Failed to load Leaflet');
        reject(new Error('Leaflet loading failed'));
      };
      
      document.head.appendChild(script);
    });
  }
  
  // üó∫Ô∏è –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Leaflet –∫–∞—Ä—Ç–∏
  function createLeafletMap(container) {
    try {
      console.log('üó∫Ô∏è Creating Leaflet map instance...');
      
      const mapCoords = window.mapConfig.coords;
      const mapZoom = window.mapConfig.zoom || 12;
      const mapCity = window.mapConfig.city || 'Unknown';
      const mapCountry = window.mapConfig.country || 'Unknown';
      
      // –û—á–∏—â—É—î–º–æ container
      container.innerHTML = '';
      
      // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–∞—Ä—Ç—É –∑ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
      const map = L.map(container, {
        center: mapCoords,
        zoom: mapZoom,
        zoomControl: false,
        attributionControl: false,
        preferCanvas: true,
        renderer: L.canvas(),
        // Performance –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        wheelPxPerZoomLevel: 120,
        zoomAnimationThreshold: 4
      });
      
      // ‚ö° Optimized tile layer
      const tileLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '¬© OpenStreetMap',
        maxZoom: 18,
        crossOrigin: true,
        // Performance –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
        updateWhenIdle: true,
        updateWhenZooming: false,
        keepBuffer: 2,
        // Faster loading
        subdomains: ['a', 'b', 'c']
      });
      
      tileLayer.addTo(map);
      
      // üìç –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π –º–∞—Ä–∫–µ—Ä
      const markerIcon = L.divIcon({
        className: 'custom-marker-optimized',
        html: `
          <div style="
            background: #ef4444; 
            width: 20px; 
            height: 20px; 
            border-radius: 50%; 
            border: 3px solid white; 
            box-shadow: 0 3px 12px rgba(239, 68, 68, 0.4);
            position: relative;
          ">
            <div style="
              position: absolute;
              top: -5px;
              left: -5px;
              width: 30px;
              height: 30px;
              border-radius: 50%;
              background: rgba(239, 68, 68, 0.3);
              animation: markerPulse 2s infinite;
            "></div>
          </div>
        `,
        iconSize: [26, 26],
        iconAnchor: [13, 13]
      });
      
      // –î–æ–¥–∞—î–º–æ –º–∞—Ä–∫–µ—Ä
      const marker = L.marker(mapCoords, { 
        icon: markerIcon,
        riseOnHover: true
      }).addTo(map);
      
      // üí¨ Popup - –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏–π —Ç–µ–∫—Å—Ç
      const youAreHereText = getLocalizedText('you_are_here');
      
      marker.bindPopup(`
        <div style="text-align: center; padding: 8px; min-width: 150px;">
          <div style="font-weight: 700; color: #1f2937; margin-bottom: 4px;">
            üìç ${youAreHereText}
          </div>
          <div style="color: #6b7280; font-size: 0.9rem;">
            ${mapCity}, ${mapCountry}
          </div>
        </div>
      `, {
        offset: L.point(0, -10),
        closeButton: false,
        autoClose: false,
        closeOnClick: false,
        className: 'custom-popup'
      }).openPopup();
      
      // –î–æ–¥–∞—î–º–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
      setTimeout(() => {
        L.control.zoom({ 
          position: 'topright',
          zoomInTitle: '–ó–±—ñ–ª—å—à–∏—Ç–∏',
          zoomOutTitle: '–ó–º–µ–Ω—à–∏—Ç–∏'
        }).addTo(map);
        
        L.control.attribution({ 
          position: 'bottomright',
          prefix: ''
        }).addTo(map);
      }, 1000);
      
      console.log('‚úÖ Map created successfully');
      
      // Analytics
      if (window.queueAnalytics) {
        queueAnalytics({
          'event': 'map_loaded_optimized',
          'event_category': 'engagement',
          'event_label': 'leaflet_optimized'
        });
      }
      
    } catch (error) {
      console.error('‚ùå Map creation error:', error);
      showMapError(container);
    }
  }
  
  // üåê –õ–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–µ–∫—Å—Ç—É
  function getLocalizedText(key) {
    const translations = {
      'you_are_here': {
        'en': 'You are here',
        'de': 'Sie sind hier',
        'pl': 'Jeste≈õ tutaj',
        'hi': '‡§Ü‡§™ ‡§Ø‡§π‡§æ‡§Å ‡§π‡•à‡§Ç',
        'uk': '–í–∏ —Ç—É—Ç',
        'ru': '–í—ã –∑–¥–µ—Å—å'
      }
    };
    
    const lang = window.mapConfig?.lang || 'en';
    return translations[key]?.[lang] || translations[key]?.['en'] || 'You are here';
  }
  
  // üö® Error state
  function showMapError(container) {
    container.innerHTML = `
      <div style="
        width: 100%; 
        height: 300px; 
        background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%); 
        border-radius: 12px; 
        display: flex; 
        align-items: center; 
        justify-content: center;
        color: white;
        text-align: center;
      ">
        <div>
          <div style="font-size: 3rem; margin-bottom: 15px;">‚ùå</div>
          <div style="font-size: 1.1rem; font-weight: 600; margin-bottom: 8px;">
            –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–∞—Ä—Ç–∏
          </div>
          <div style="font-size: 0.9rem; opacity: 0.9;">
            –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–∑'—î–¥–Ω–∞–Ω–Ω—è
          </div>
        </div>
      </div>
    `;
  }
  
  // üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeOptimizedMap);
  } else {
    setTimeout(initializeOptimizedMap, 200);
  }