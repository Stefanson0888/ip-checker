from dotenv import load_dotenv
import os
import httpx 
import json
from pathlib import Path

load_dotenv()
IPHUB_API_KEY = os.getenv("IPHUB_API_KEY")

# –ó–º—ñ–Ω–Ω–∞ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É IPHub API
IPHUB_ENABLED = bool(IPHUB_API_KEY)

# üåç –î–û–î–ê–ù–û: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤
def load_translations():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—Å—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –∑ –ø–∞–ø–∫–∏ locales"""
    translations = {}
    locales_dir = Path("locales")
    
    if not locales_dir.exists():
        print("‚ö†Ô∏è –ü–∞–ø–∫–∞ locales –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞! –°—Ç–≤–æ—Ä—ñ—Ç—å —ó—ó –∑ —Ñ–∞–π–ª–∞–º–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤")
        return {"en": {}, "uk": {}, "de": {}, "hi": {}}
    
    for lang in ['en', 'de', 'uk', 'hi']:
        lang_file = locales_dir / lang / "messages.json"
        if lang_file.exists():
            try:
                with open(lang_file, 'r', encoding='utf-8') as f:
                    translations[lang] = json.load(f)
                print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –ø–µ—Ä–µ–∫–ª–∞–¥: {lang}")
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è {lang}: {e}")
                translations[lang] = {}
        else:
            print(f"‚ö†Ô∏è –§–∞–π–ª {lang_file} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            translations[lang] = {}
    
    return translations

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
TRANSLATIONS = load_translations()

def get_language_from_request(request) -> str:
    """–í–∏–∑–Ω–∞—á–∞—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ URL –∞–±–æ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤"""
    # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ URL —à–ª—è—Ö
    path = request.url.path
    if path.startswith('/de/') or path == '/de':
        return 'de'
    if path.startswith('/uk/') or path == '/uk': 
        return 'uk'
    if path.startswith('/hi/') or path == '/hi':
        return 'hi'
    if path.startswith('/en/') or path == '/en':
        return 'en'
    
    # –ü–æ—Ç—ñ–º –¥–∏–≤–∏–º–æ—Å—å –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ Accept-Language
    accept_lang = request.headers.get('accept-language', '').lower()
    if 'de' in accept_lang and 'de' not in ['en', 'uk', 'hi']:
        return 'de'
    if 'uk' in accept_lang:
        return 'uk' 
    if 'hi' in accept_lang:
        return 'hi'
    
    # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - –∞–Ω–≥–ª—ñ–π—Å—å–∫–∞
    return 'en'

def translate(key: str, lang: str) -> str:
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É —Ç–µ–∫—Å—Ç—É"""
    return TRANSLATIONS.get(lang, {}).get(key, key)

def get_language_info(lang: str) -> dict:
    """–ü–æ–≤–µ—Ä—Ç–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –º–æ–≤—É –¥–ª—è SEO —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
    languages = {
        'en': {
            'code': 'en',
            'name': 'English',
            'flag': 'üá∫üá∏',
            'url': '/',
            'hreflang': 'en',
            'locale': 'en_US'
        },
        'de': {
            'code': 'de', 
            'name': 'Deutsch',
            'flag': 'üá©üá™',
            'url': '/de/',
            'hreflang': 'de',
            'locale': 'de_DE'
        },
        'uk': {
            'code': 'uk',
            'name': '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞', 
            'flag': 'üá∫üá¶',
            'url': '/uk/',
            'hreflang': 'uk',
            'locale': 'uk_UA'
        },
        'hi': {
            'code': 'hi',
            'name': '‡§π‡§ø‡§®‡•ç‡§¶‡•Ä',
            'flag': 'üáÆüá≥', 
            'url': '/hi/',
            'hreflang': 'hi',
            'locale': 'hi_IN'
        }
    }
    return languages.get(lang, languages['en'])

async def fetch_iphub_info(ip: str) -> dict:
    global IPHUB_ENABLED  # ‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
    
    # –Ø–∫—â–æ IPHub –≤—ñ–¥–∫–ª—é—á–µ–Ω–∏–π, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—É—Å—Ç–∏–π —Å–ª–æ–≤–Ω–∏–∫
    if not IPHUB_ENABLED:
        return {}
        
    url = f"https://v2.api.iphub.info/ip/{ip}"
    headers = {"X-Key": IPHUB_API_KEY}
    
    try:
        async with httpx.AsyncClient(timeout=10.0) as client:  # –¥–æ–¥–∞–≤ timeout
            response = await client.get(url, headers=headers)
            
            if response.status_code == 200:
                return response.json()
            elif response.status_code == 403:
                # –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π API –∫–ª—é—á - –≤—ñ–¥–∫–ª—é—á–∞—î–º–æ IPHub
                IPHUB_ENABLED = False
                print(f"‚ùå IPHub API key invalid - disabling IPHub service")
                print(f"Response: {response.text}")
                return {}
            elif response.status_code == 429:
                # Rate limit exceeded
                print(f"‚ö†Ô∏è IPHub rate limit exceeded: {response.text}")
                return {}
            else:
                print(f"‚ö†Ô∏è IPHub returned status {response.status_code}: {response.text}")
                return {}
                
    except httpx.TimeoutException:
        print(f"‚è∞ IPHub timeout for IP {ip}")
        return {}
    except Exception as e:
        print(f"‚ùå IPHub error: {e}")
        return {}

from fastapi import FastAPI, Request, Query
from fastapi.responses import FileResponse, HTMLResponse
from fastapi.templating import Jinja2Templates
from fastapi.staticfiles import StaticFiles
from utils.ip import get_client_ip, fetch_ip_info
from user_agents import parse

app = FastAPI()
app.mount("/static", StaticFiles(directory="static"), name="static")
templates = Jinja2Templates(directory="templates")

# üåç –î–û–î–ê–ù–û: –†–µ—î—Å—Ç—Ä—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —à–∞–±–ª–æ–Ω—ñ–≤
templates.env.globals['translate'] = translate
templates.env.globals['get_language_info'] = get_language_info

@app.get("/robots.txt", include_in_schema=False)
async def robots_txt():
    return FileResponse("static/robots.txt", media_type="text/plain")

@app.get("/sitemap.xml", include_in_schema=False)
async def sitemap_xml():
    return FileResponse("static/sitemap.xml", media_type="application/xml")

# üåç –ó–ú–Ü–ù–ï–ù–û: –î–æ–¥–∞–Ω–æ –º–∞—Ä—à—Ä—É—Ç–∏ –¥–ª—è –≤—Å—ñ—Ö –º–æ–≤
@app.get("/", response_class=HTMLResponse)
@app.get("/en/", response_class=HTMLResponse)
@app.get("/de/", response_class=HTMLResponse)
@app.get("/uk/", response_class=HTMLResponse)
@app.get("/hi/", response_class=HTMLResponse)
async def get_ip(request: Request):
    client_ip = await get_client_ip(request)
    ip_data = await fetch_ip_info(client_ip) or {}
    iphub_data = await fetch_iphub_info(client_ip) or {}
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –º–æ–≤—É
    language = get_language_from_request(request)
    
    return render_ip_template(request, ip_data, client_ip, iphub_data, language)

# üåç –ó–ú–Ü–ù–ï–ù–û: –î–æ–¥–∞–Ω–æ –ø—ñ–¥—Ç—Ä–∏–º–∫—É –º–æ–≤ –≤ lookup
@app.get("/lookup", response_class=HTMLResponse)
@app.get("/en/lookup", response_class=HTMLResponse)
@app.get("/de/lookup", response_class=HTMLResponse) 
@app.get("/uk/lookup", response_class=HTMLResponse)
@app.get("/hi/lookup", response_class=HTMLResponse)
async def lookup_ip(request: Request, ip: str = Query(...)):
    ip_data = await fetch_ip_info(ip) or {}
    iphub_data = await fetch_iphub_info(ip) or {}
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –º–æ–≤—É
    language = get_language_from_request(request)
    
    return render_ip_template(request, ip_data, ip, iphub_data, language)

# üåç –ó–ú–Ü–ù–ï–ù–û: –î–æ–¥–∞–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä language
def render_ip_template(request: Request, ip_data: dict, ip: str, iphub_data: dict = None, language: str = 'uk'):
    user_agent_str = request.headers.get("user-agent", "")
    user_agent = parse(user_agent_str)

    connection = ip_data.get("connection", {})
    security = ip_data.get("security", {})
    timezone = ip_data.get("timezone", {})
    currency = ip_data.get("currency", {})

    flag_url = (
        f"https://flagcdn.com/256x192/{ip_data.get('country_code', '').lower()}.png"
        if ip_data.get("country_code") else None
    )

    languages_raw = ip_data.get("languages", [])
    language_display = ", ".join(languages_raw) if isinstance(languages_raw, list) else str(languages_raw)

    # üåç –î–û–î–ê–ù–û: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∑ –º–æ–≤–æ—é —Ç–∞ –ø–µ—Ä–µ–∫–ª–∞–¥–∞–º–∏
    context = {
        "request": request,
        "ip": ip,
        "type": ip_data.get("type", "Unknown"),
        "isp": connection.get("isp", "Unknown"),
        "asn": connection.get("asn", "Unknown"),
        "hostname": connection.get("domain", "Unknown"),
        "is_proxy": security.get("proxy", False),
        "is_vpn": security.get("vpn", False),
        "is_tor": security.get("tor", False),
        "user_agent": user_agent_str,
        "browser": user_agent.browser.family,
        "os": user_agent.os.family,
        "city": ip_data.get("city", "Unknown"),
        "region": ip_data.get("region", "Unknown"),
        "country": ip_data.get("country", "Unknown"),
        "country_code": ip_data.get("country_code", "Unknown"),
        "postal": ip_data.get("postal", "Unknown"),
        "calling_code": ip_data.get("calling_code", "Unknown"),
        "latitude": ip_data.get("latitude"),
        "longitude": ip_data.get("longitude"),
        "timezone": timezone.get("id", "Unknown"),
        "currency": currency.get("code", "Unknown"),
        "language": language_display,
        "flag_url": flag_url,
        "iphub_block": iphub_data.get("block") if iphub_data else None,
        "iphub_isp": iphub_data.get("isp") if iphub_data else None,
        "iphub_hostname": iphub_data.get("hostname") if iphub_data else None,
        
        # üåç –î–û–î–ê–ù–û: –ú–æ–≤–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
        "current_language": language,
        "language_info": get_language_info(language),
        "available_languages": ['en', 'de', 'uk', 'hi'],
        
        # üåç –î–û–î–ê–ù–û: SEO –º–µ—Ç–∞ –¥–∞–Ω—ñ
        "page_title": translate("title", language),
        "page_description": translate("description", language),
        
        # üåç –î–û–î–ê–ù–û: URL –¥–ª—è hreflang
        "hreflang_urls": {
            "en": request.url_for("get_ip").replace(request.url.path, "/"),
            "de": request.url_for("get_ip").replace(request.url.path, "/de/"), 
            "uk": request.url_for("get_ip").replace(request.url.path, "/uk/"),
            "hi": request.url_for("get_ip").replace(request.url.path, "/hi/")
        }
    }

    return templates.TemplateResponse("index.html", context)

# –î–æ–¥–∞—Ç–∫–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞–Ω—É IPHub (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
@app.get("/iphub-status")
async def iphub_status():
    return {
        "enabled": IPHUB_ENABLED,
        "api_key_present": bool(IPHUB_API_KEY)
    }

# üåç –î–û–î–ê–ù–û: API –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ (–¥–ª—è AJAX)
@app.get("/api/translations/{language}")
async def get_translations(language: str):
    """API –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤"""
    if language not in ['en', 'de', 'uk', 'hi']:
        language = 'en'
    
    return {
        "language": language,
        "translations": TRANSLATIONS.get(language, {}),
        "language_info": get_language_info(language)
    }

# üåç –î–û–î–ê–ù–û: –†–µ–¥—ñ—Ä–µ–∫—Ç –¥–ª—è —Å—Ç–∞—Ä–∏—Ö URL
@app.get("/index")
@app.get("/index.html") 
async def redirect_to_main(request: Request):
    """–†–µ–¥—ñ—Ä–µ–∫—Ç –∑—ñ —Å—Ç–∞—Ä–∏—Ö URL –Ω–∞ –≥–æ–ª–æ–≤–Ω—É"""
    from fastapi.responses import RedirectResponse
    return RedirectResponse(url="/", status_code=301)